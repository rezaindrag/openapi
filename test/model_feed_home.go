/*
 * Dummy
 *
 * Dummy
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FeedHome - struct for FeedHome
type FeedHome struct {
	Article *Article
	PersonHome *PersonHome
}

// ArticleAsFeedHome is a convenience function that returns Article wrapped in FeedHome
func ArticleAsFeedHome(v *Article) FeedHome {
	return FeedHome{ Article: v}
}

// PersonHomeAsFeedHome is a convenience function that returns PersonHome wrapped in FeedHome
func PersonHomeAsFeedHome(v *PersonHome) FeedHome {
	return FeedHome{ PersonHome: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FeedHome) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discrimintor lookup.")
	}

	// check if the discriminator value is 'Article'
	if jsonDict["type"] == "Article" {
		// try to unmarshal JSON data into Article
		err = json.Unmarshal(data, &dst.Article)
		if err == nil {
			return nil // data stored in dst.Article, return on the first match
		} else {
			dst.Article = nil
			return fmt.Errorf("Failed to unmarshal FeedHome as Article: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PersonHome'
	if jsonDict["type"] == "PersonHome" {
		// try to unmarshal JSON data into PersonHome
		err = json.Unmarshal(data, &dst.PersonHome)
		if err == nil {
			return nil // data stored in dst.PersonHome, return on the first match
		} else {
			dst.PersonHome = nil
			return fmt.Errorf("Failed to unmarshal FeedHome as PersonHome: %s", err.Error())
		}
	}

	// check if the discriminator value is 'article'
	if jsonDict["type"] == "article" {
		// try to unmarshal JSON data into Article
		err = json.Unmarshal(data, &dst.Article)
		if err == nil {
			return nil // data stored in dst.Article, return on the first match
		} else {
			dst.Article = nil
			return fmt.Errorf("Failed to unmarshal FeedHome as Article: %s", err.Error())
		}
	}

	// check if the discriminator value is 'person'
	if jsonDict["type"] == "person" {
		// try to unmarshal JSON data into PersonHome
		err = json.Unmarshal(data, &dst.PersonHome)
		if err == nil {
			return nil // data stored in dst.PersonHome, return on the first match
		} else {
			dst.PersonHome = nil
			return fmt.Errorf("Failed to unmarshal FeedHome as PersonHome: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FeedHome) MarshalJSON() ([]byte, error) {
	if src.Article != nil {
		return json.Marshal(&src.Article)
	}

	if src.PersonHome != nil {
		return json.Marshal(&src.PersonHome)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FeedHome) GetActualInstance() (interface{}) {
	if obj.Article != nil {
		return obj.Article
	}

	if obj.PersonHome != nil {
		return obj.PersonHome
	}

	// all schemas are nil
	return nil
}

type NullableFeedHome struct {
	value *FeedHome
	isSet bool
}

func (v NullableFeedHome) Get() *FeedHome {
	return v.value
}

func (v *NullableFeedHome) Set(val *FeedHome) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedHome) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedHome) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedHome(val *FeedHome) *NullableFeedHome {
	return &NullableFeedHome{value: val, isSet: true}
}

func (v NullableFeedHome) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedHome) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


