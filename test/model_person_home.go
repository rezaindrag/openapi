/*
 * Dummy
 *
 * Dummy
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PersonHome struct for PersonHome
type PersonHome struct {
	Type string `json:"type"`
	FirstName *string `json:"first_name,omitempty"`
	LastName *string `json:"last_name,omitempty"`
}

// NewPersonHome instantiates a new PersonHome object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersonHome(type_ string, ) *PersonHome {
	this := PersonHome{}
	this.Type = type_
	return &this
}

// NewPersonHomeWithDefaults instantiates a new PersonHome object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersonHomeWithDefaults() *PersonHome {
	this := PersonHome{}
	return &this
}

// GetType returns the Type field value
func (o *PersonHome) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PersonHome) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PersonHome) SetType(v string) {
	o.Type = v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *PersonHome) GetFirstName() string {
	if o == nil || o.FirstName == nil {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonHome) GetFirstNameOk() (*string, bool) {
	if o == nil || o.FirstName == nil {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *PersonHome) HasFirstName() bool {
	if o != nil && o.FirstName != nil {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *PersonHome) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *PersonHome) GetLastName() string {
	if o == nil || o.LastName == nil {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonHome) GetLastNameOk() (*string, bool) {
	if o == nil || o.LastName == nil {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *PersonHome) HasLastName() bool {
	if o != nil && o.LastName != nil {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *PersonHome) SetLastName(v string) {
	o.LastName = &v
}

func (o PersonHome) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.FirstName != nil {
		toSerialize["first_name"] = o.FirstName
	}
	if o.LastName != nil {
		toSerialize["last_name"] = o.LastName
	}
	return json.Marshal(toSerialize)
}

type NullablePersonHome struct {
	value *PersonHome
	isSet bool
}

func (v NullablePersonHome) Get() *PersonHome {
	return v.value
}

func (v *NullablePersonHome) Set(val *PersonHome) {
	v.value = val
	v.isSet = true
}

func (v NullablePersonHome) IsSet() bool {
	return v.isSet
}

func (v *NullablePersonHome) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersonHome(val *PersonHome) *NullablePersonHome {
	return &NullablePersonHome{value: val, isSet: true}
}

func (v NullablePersonHome) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersonHome) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


