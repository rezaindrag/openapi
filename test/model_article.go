/*
 * Dummy
 *
 * Dummy
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Article struct for Article
type Article struct {
	Type string `json:"type"`
	Title *string `json:"title,omitempty"`
}

// NewArticle instantiates a new Article object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArticle(type_ string, ) *Article {
	this := Article{}
	this.Type = type_
	return &this
}

// NewArticleWithDefaults instantiates a new Article object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArticleWithDefaults() *Article {
	this := Article{}
	return &this
}

// GetType returns the Type field value
func (o *Article) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Article) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Article) SetType(v string) {
	o.Type = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Article) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Article) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Article) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Article) SetTitle(v string) {
	o.Title = &v
}

func (o Article) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	return json.Marshal(toSerialize)
}

type NullableArticle struct {
	value *Article
	isSet bool
}

func (v NullableArticle) Get() *Article {
	return v.value
}

func (v *NullableArticle) Set(val *Article) {
	v.value = val
	v.isSet = true
}

func (v NullableArticle) IsSet() bool {
	return v.isSet
}

func (v *NullableArticle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArticle(val *Article) *NullableArticle {
	return &NullableArticle{value: val, isSet: true}
}

func (v NullableArticle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArticle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


